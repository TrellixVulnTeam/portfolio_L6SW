version: "3.8"

x-common:
  &common
  image: apache/airflow:2.3.0
  user: "${AIRFLOW_UID}:0"
  env_file: 
    - .env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock

x-depends-on:
  &depends-on
  depends_on:
    db:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully

services:


  app:
    container_name: app
    hostname: app
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5
    build: 
     context: app
    restart: unless-stopped
    links:
      - db
    ports:
      - "5005:5005"
    depends_on:
      - db
    volumes:
      - ./app:/app/



  db:
    image: postgres
    container_name: db_flask
    hostname: db_flask
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "valeEY"]
      interval: 5s
      retries: 5
    env_file: 
      - .env
    ports:
      - '5432:5432'
    volumes:
      - ./postgres/db:/docker-entrypoint-initdb.d/
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/logs:/logs


  nginx:
    restart: always
    container_name: nginx
    mem_limit: 512m
    mem_reservation: 128M
    cpus: 0.5
    hostname: nginx
    build: ./nginx/
    volumes:
    - ./nginx/config:/usr/share/nginx/html/
    - ./nginx/html:/etc/nginx/html/
    ports:
      - "81:81"
    links:
      - app

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000



  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1



  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092



  scheduler:
    <<: *common
    <<: *depends-on
    container_name: airflow-scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"



  webserver:
    <<: *common
    <<: *depends-on
    container_name: airflow-webserver
    restart: always
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 30s
      retries: 5


  
  airflow-init:
    <<: *common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

                                                           

  mlflow:
    container_name: mlflow_server
    hostname: mlflow_server
    restart: unless-stopped
    build: 
      context: mlflow
    depends_on:
      - db
    expose:
      - "5001"
    env_file: 
      - .env
    volumes:
    - ./mlflow:/mlflow/
  

networks: 
  broker-kafka:
    driver: bridge   